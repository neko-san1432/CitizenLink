# Comprehensive Security Analysis Workflow
# Handles CodeQL, ESLint, and security auto-resolution in one workflow

name: "Security Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  security-analysis:
    name: "Security Analysis & Auto-Fix"
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      security-events: write
      pull-requests: write
      actions: read
      packages: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # ESLint Analysis
      - name: Run ESLint Analysis
        if: matrix.language == 'javascript-typescript'
        env:
          SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
        run: |
          echo "üîç Running ESLint analysis..."
          
          # Create empty SARIF file first
          echo '{"version": "2.1.0", "runs": [{"results": []}]}' > eslint-results.sarif
          
          # Run ESLint and capture output
          if npx eslint . \
            --config .eslintrc.js \
            --ext .js,.jsx,.ts,.tsx \
            --format @microsoft/eslint-formatter-sarif \
            --output-file eslint-results.sarif; then
            echo "‚úÖ ESLint analysis completed successfully"
          else
            echo "‚ö†Ô∏è ESLint found issues, but continuing with analysis"
            # Ensure SARIF file exists even if ESLint fails
            if [ ! -f eslint-results.sarif ]; then
              echo '{"version": "2.1.0", "runs": [{"results": []}]}' > eslint-results.sarif
            fi
          fi
        continue-on-error: true

      - name: Upload ESLint Results
        if: matrix.language == 'javascript-typescript'
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true
          category: "eslint"

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v4
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v4
        with:
          category: "/language:${{matrix.language}}"

      # Security Auto-Resolution (only for JavaScript)
      - name: Run Security Auto-Resolution
        if: matrix.language == 'javascript-typescript'
        id: auto-resolve
        run: |
          echo "ü§ñ Running security auto-resolution..."
          
          # Run npm audit fix
          echo "üîç Running npm audit..."
          npm run security-audit || true
          
          echo "üîß Running npm audit fix..."
          if npm run security-fix; then
            echo "audit-fixed=true" >> $GITHUB_OUTPUT
          else
            echo "audit-fixed=false" >> $GITHUB_OUTPUT
          fi
          
          # Run custom security fixes
          if npm run security-scan; then
            echo "auto-resolved=true" >> $GITHUB_OUTPUT
          else
            echo "auto-resolved=false" >> $GITHUB_OUTPUT
          fi

      # Check for changes and commit
      - name: Check for file changes
        if: matrix.language == 'javascript-typescript'
        id: file-changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes-detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes-detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit security fixes
        if: matrix.language == 'javascript-typescript' && steps.file-changes.outputs.changes-detected == 'true'
        id: commit-security-fixes
        run: |
          git config --local user.email "security-bot@github.com"
          git config --local user.name "Security Auto-Resolver"
          
          git add package.json package-lock.json src/ .eslintrc.js SECURITY.md
          
          if ! git diff --cached --quiet; then
            git commit -m "üîí Auto-resolve security issues

            - Fixed npm dependency vulnerabilities
            - Applied ESLint security rule fixes
            - Updated security configurations

            Auto-resolved by GitHub Actions"
            echo "committed=true" >> $GITHUB_OUTPUT
          else
            echo "committed=false" >> $GITHUB_OUTPUT
          fi

      - name: Push security fixes
        if: matrix.language == 'javascript-typescript' && steps.file-changes.outputs.changes-detected == 'true' && steps.commit-security-fixes.outputs.committed == 'true' && github.event_name == 'pull_request'
        run: |
          git push origin HEAD:${{ github.head_ref }}

      - name: Report security fixes (main branch)
        if: matrix.language == 'javascript-typescript' && steps.file-changes.outputs.changes-detected == 'true' && steps.commit-security-fixes.outputs.committed == 'true' && github.event_name != 'pull_request'
        run: |
          echo "üîí Security fixes applied to main branch"
          echo "Files modified:"
          git diff --name-only HEAD~1
          echo "Security improvements have been applied and committed to main branch"

      # PR Comment (only for PRs)
      - name: Comment on PR with results
        if: github.event_name == 'pull_request' && matrix.language == 'javascript-typescript'
        uses: actions/github-script@v7
        with:
          script: |
            const auditFixed = '${{ steps.auto-resolve.outputs.audit-fixed }}' === 'true';
            const autoResolved = '${{ steps.auto-resolve.outputs.auto-resolved }}' === 'true';
            const changesDetected = '${{ steps.file-changes.outputs.changes-detected }}' === 'true';

            let comment = '## üîí Security Analysis Results\n\n';
            comment += '### CodeQL Analysis\n';
            comment += '‚úÖ **CodeQL**: Security analysis completed for ${{ matrix.language }}\n\n';
            
            comment += '### ESLint Analysis\n';
            comment += '‚úÖ **ESLint**: Code quality analysis completed\n\n';
            
            comment += '### Auto-Resolution\n';
            if (auditFixed) {
              comment += '‚úÖ **npm audit fix**: Applied fixes for dependency vulnerabilities\n';
            } else {
              comment += '‚ÑπÔ∏è **npm audit fix**: No dependency vulnerabilities found\n';
            }

            if (autoResolved) {
              comment += '‚úÖ **Custom security fixes**: Applied automatic security improvements\n';
            } else {
              comment += '‚ÑπÔ∏è **Custom security fixes**: No additional fixes needed\n';
            }

            if (changesDetected) {
              comment += 'üîÑ **Files modified**: Security fixes have been applied and committed\n';
            } else {
              comment += '‚úÖ **No changes**: All security checks passed\n';
            }

            comment += '\n---\n*Automated security analysis completed*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
